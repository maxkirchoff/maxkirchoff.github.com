<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | unused]]></title>
  <link href="http://bangbanghacker.co/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://bangbanghacker.co/"/>
  <updated>2013-04-08T11:11:04-07:00</updated>
  <id>http://bangbanghacker.co/</id>
  <author>
    <name><![CDATA[Max Kirchoff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Original Hack - "!!"]]></title>
    <link href="http://bangbanghacker.co/the-original-hack/"/>
    <updated>2013-02-13T14:06:00-08:00</updated>
    <id>http://bangbanghacker.co/the-original-hack</id>
    <content type="html"><![CDATA[<p>Metaphysical nihilism is a funny thing. Most major philosophical and religious doctrine revoke non-existence as a "non quality" of both the material and immaterial worlds. Non-existence is not a logical case that can be validated. In other words, one cannot say "there is not" without referencing a subject. <code>!</code> <code>¬</code> or <code>~</code> (all roughly symbolizing negation or NOT-ness) require application to a subject. However, in defining an argument to metaphysical nihilism, we inherently say that no subject exists - thus undermining the basic operation.</p>

<p>None of this is new thinking. It's been around forever and philosophers have beaten each other up for it in every age.
The <a href="http://en.wikipedia.org/wiki/Monism">Monists</a> set up a reality where all substances can be reduced to one substance. This reality became the foundation for
<a href="http://en.wikipedia.org/wiki/Gorgias">Gorgias</a>, an early thinker dealing with "non-existence", to reduce that single, immutable substance to a non-substance or nothingness.</p>

<blockquote><p>(1)Nothing exists, or (2)if it does exist we cannot know it, or (3)if we can know it it is impossible to communicate it.</p></blockquote>

<p>Convincing right? Yea, didn't think so.
So what's wrong with the above thought? Let's try to rewrite it in python:</p>

<h4>Proposition 1</h4>

<p><code>
! # there is NOT
</code>
<strong>ERROR!</strong></p>

<h4>Proposition 2 &amp; 3</h4>

<p>```
if !!</p>

<pre><code>print !! # if there's NOT NOT, then we can print it
</code></pre>

<p>```
<strong>ERROR!</strong></p>

<p>So, python doesn't get us anywhere. Neither will Javascript, Ruby or PHP. Hell, symbolic logic and math will fail us as well.
Why?</p>

<h2>The dependencies of logic</h2>

<p>Logic has few dependencies, but they are <strong>hugely important</strong> and are the basis of every language (natural or otherwise).</p>

<ul>
<li><strong>Operators are universally the same</strong> <em>(i.e. AND, OR, NOT always act the same)</em></li>
<li><strong>a given State is universally the same</strong> <em>(TRUE is always TRUE)</em></li>
</ul>


<p>With the above dependencies met, we can use logic with the basic states of TRUE AND FALSE.</p>

<p><code>IF TRUE THEN TRUE</code></p>

<p><code>IF NOT TRUE THEN FALSE</code></p>

<p><code>IF FALSE AND NOT TRUE THEN FALSE</code></p>

<p>Everything is beautiful… and then…</p>

<h2>The rise of the NOTHING thing</h2>

<p>So, logic evaluates operators and conditions of statements to determine TRUE/FALSE states. When language developed, shortcomings of logic became apparent. While logic relied on immutable states, we observed a another mode or state that was changing, a basic representation being existence/nonexistence. A thing may "be" and then "not be" or vice-versa, or any sort chain of be/not/be/not/be/not states.</p>

<p>Linguistically we adopted this status and formed the sentiments of existence/nonexistence all while an argument arose that continues today over the objective nature of state change in the universe. (See <a href="http://en.wikipedia.org/wiki/Heraclitus">Heraclitus</a> and <a href="http://en.wikipedia.org/wiki/Parmenides">Parmenides</a>)</p>

<p>The language constructs developed underneath previous logical operations to convey this sub-logical mode of not yet being defined or "existing".</p>

<p>Commonly this is called <em>nothingness</em>, <em>non-existence</em>, etc.</p>

<p>In programming this is expressed as <em>undefined</em>, <em>null</em>, <em>nil</em>, <em>None</em></p>

<p>In practice, the mode seems helpful as it allows the expression of a state that cannot have logical conditions or operations applied to it.</p>

<p><code>
Me: Where is my hat, Christina?
Christina: Max, you don't own a hat.
Me: Oh, okay.
</code></p>

<p>or expressed in ruby</p>

<p>```
if defined? max_hat              # does max have a hat</p>

<pre><code>return location(max_hat)        # get the hat's location
</code></pre>

<p>else                                # otherwise</p>

<pre><code>return "you don't own a hat!"   # tell him he doesn't own a hat
</code></pre>

<p>```</p>

<p>It may seem that <code>defined?</code>, <code>nil?</code>, <code>isset()</code> and other sorts of methods in programming are just more advanced operators, but they are not. They are checks that apply to a sub-logic state, the state of existence.</p>

<h2>Hacking (Non)Existence</h2>

<p>However, in common practice in programming, math, philosophy (etc) we find ourselves with logical conditions and operators beginning to mix into a sub-logical mode. It's not clear when or how we began this concoction of mis-matched expressions, but it has been around as long as we can remember. A good way to examine this use of disperate items is in code:</p>

<p>```</p>

<blockquote><p>nonexistence = nil    # So nonexistence doesn't exist</p>

<p>puts nonexistence     # Printing nonexistence gives us nothing. cool.</p>

<p>puts !nonexistence    # Printing the "not nonexistence"
true                    # gives us something…and it's true. ok, i guess.</p>

<p>puts !!nonexistence   # Printing the "not not nonexistence"
false                   # gives us something…and it's false. wat?
```</p></blockquote>

<p>And this is where Gorgias (and many others included the <a href="http://en.wikipedia.org/wiki/Sophist">Sophists</a>) found their footing. If you apply the pre-logical constructs of existence within the conditionals of logic…everything falls apart. Logic validates existing statements, but we find ourselves with validation of a non-existent mode. WTF?</p>

<p>It's a hack, a really old hack, possibly the first hack.</p>

<p>Somehow we went from ordered operators and conditions, to a disordered reality of invalid universal states. If !!nonexistence can be false (signifying inherent existence) then nonexistence itself exists.</p>

<p>Seriously, WTF?</p>

<p>We are left to wonder then, if logic can be hacked, can it be broken?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Badass LAMP stack in 10 minutes]]></title>
    <link href="http://bangbanghacker.co/badass-lamp-stack-10-minutes/"/>
    <updated>2013-02-12T14:06:00-08:00</updated>
    <id>http://bangbanghacker.co/badass-lamp-stack-10-minutes</id>
    <content type="html"><![CDATA[<p>While lamenting my personal VPS today, <a href="https://github.com/samkeen">Sam</a> nonchalantly mentioned the hot new <a href="https://www.digitalocean.com/">DigitalOcean</a> that was being vetted on <a href="http://news.ycombinator.com/item?id=5207162">hacker news</a> as a suitable challenger to <a href="http://www.linode.com/">Linode</a>. Ignoring Sam's recommendations is a geek "faux pas" as he's the <em>go-to early adopter</em> of cool projects and services. As such, I jammed over to <strong>DigitalOcean's</strong> site to sign up.</p>

<p>Their Trial Account option had been locked down due to the massive response they were recieving - probably a mixture of <strong>"cha-ching!"</strong> for thier business team and <strong>"oh shit!"</strong> for their tech team.</p>

<h3>$5 Server Value Meal</h3>

<p>By providing a credit card I was able to get an account on their smallest machine at a meager $5/mo. Yes, $5. Five bucks. For the price of commuting to work on the train for one day, I got a SSD server.</p>

<p>To backup a little, if you're not familiar with Linode, DigitalOcean, or that class of VPS service, these are the perfect place for small projects, blogs, simple sites, and beta testing grounds for new ideas. They offer actual server ownership so you can configure and deploy MANY types of systems and stacks without cost of bigger services or the overhead of fulltime system administration.</p>

<h3>Server Building in 10 minutes</h3>

<p>Right away DigitalOcean's admin UI made sense to me. Create a Droplet (just think of this as a server for now), take snapshots of a Droplet, manage DNS, manage billing.</p>

<p>My initial Droplet was configured as such:</p>

<ul>
<li>Droplet Size: 512MB RAM, 1 CPU , 20GB SSD Disk</li>
<li>Droplet Location: New York</li>
<li>Droplet Image (OS): Ubuntu 12.10</li>
</ul>


<p>With these selections I could replicate my Linode VPS and quickly get my code moving. Build and boot of my Droplet was roughly <strong>55 seconds</strong> (just as they advertise).</p>

<p>I didn't follow their <a href="https://www.digitalocean.com/community/articles/initial-server-setup-with-ubuntu-12-04">Ubuntu setup guide</a>, but it's really well written. If you don't know much about managing servers, please read and follow ALL their docs…you will be sorry if you don't.</p>

<p>They emailed me a root password along with a note that my Droplet had been built. I generated some SSH keys and shoved the public key onto the server. I also disabled the password login for root, all about <strong>2 minutes</strong>.</p>

<p>I ssh'd in, updated my system, and started grabbing all the packages I needed. Disk write speeds and downloads were crazy fast. I had apache2, mysql, php5 and all the modules I could carry in about <strong>7 minutes</strong>.</p>

<p>They offer a great <a href="https://www.digitalocean.com/community/articles/how-to-launch-your-site-on-a-new-ubuntu-12-04-server-with-lamp-sftp-and-dns">LAMP on Ubuntu guide</a> as well.</p>

<p>I added some folders to <code>/srv/www</code> for my sites, configured the vhosts and away we went. Empty Droplet to functioning LAMP stack in 10 minutes flat.</p>

<h3>Take a Snapshot, it will last longer</h3>

<p>As with Linode and a few others, backups are available in addition to images. However in DigitalOcean the snapshot/image workflow made more sense to me. Once I had finished my initial LAMP stack setup, I was able to take a snapshot in the admin. With that snapshot I could deploy that image over and over. Obviously with a regular ol' LAMP stack this isn't all that innovative, however with more complicated configurations that involve varying access security and addons (php modules, ruby gems, python dependencies) in a given server environment.
This also has obvious uses around scaling across multiple Droplets as well.</p>

<p>That's all. Functioning, replicable server is 10 minutes. :P</p>
]]></content>
  </entry>
  
</feed>
